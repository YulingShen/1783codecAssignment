import numpy as np
from matplotlib import pyplot as plt
from matplotlib.pyplot import cm
from scipy.optimize import curve_fit

def objective(x, a, b, c):
    return a * np.log(x) + b * x + c

def RD_plot():
    bits = {
            'Default_test': [
                        [417524, 394312, 391053, 391805, 392170, 393418, 376931, 390492, 421649, 391846],
                        [128455, 94228, 91183, 88863, 90569, 92551, 84163, 88147, 129642, 88784],
                        [19606, 8184, 8572, 8620, 8456, 8507, 7647, 7799, 20297, 8491],
                        [2047, 3970, 5392, 5752, 5612, 5708, 5962, 5976, 1882, 3975]
                    ], 
            'MFR_test': [
                    [417524, 394312, 391053, 391805, 392170, 393418, 376931, 390492, 421649, 391846],
                    [128455, 94228, 91183, 88863, 90569, 92551, 84163, 88147, 129642, 88784],
                    [19606, 8184, 8572, 8620, 8456, 8507, 7647, 7799, 20297, 8491],
                    [2047, 3970, 5392, 5752, 5612, 5708, 5962, 5976, 1882, 3975]
                ],
            'VBSEnable_only_test': [
                    [503220, 542678, 542576, 553227, 548616, 547663, 548821, 551810, 509580, 550311],
                    [194727, 185949, 182389, 190460, 183355, 186263, 179092, 182381, 196697, 185197],
                    [40095, 28516, 31630, 29688, 31281, 32525, 31844, 30125, 40653, 26051],
                    [6272, 9198, 11391, 12541, 13253, 13115, 13282, 13373, 6043, 8909]
                ], 
            'FMEEnable_only_test': [
                    [417524, 335645, 326993, 320743, 323354, 321225, 309495, 307392, 421649, 341421],
                    [128455, 75963, 73139, 71445, 72353, 71428, 67500, 63800, 129642, 74417],
                    [19606, 8485, 8753, 8383, 8606, 7897, 7059, 7489, 20297, 8449],
                    [2047, 4825, 6182, 6499, 6582, 6607, 6687, 6693, 1882, 4904]
                ], 
            'FastMEEnable_only_test': [
                    [417524, 391556, 386500, 388829, 392887, 393597, 377368, 391281, 421649, 395325],
                    [128455, 91466, 88426, 85949, 89590, 91247, 83824, 89569, 129642, 91317],
                    [19606, 7782, 9188, 8642, 8765, 9105, 8027, 8508, 20297, 8676],
                    [2047, 3750, 4974, 5159, 5384, 5463, 5313, 5504, 1882, 3608]
                ], 
            'AllEnable_test': [
                    [503220, 448671, 440624, 444456, 452914, 457787, 449706, 436275, 509580, 465811],
                    [194727, 170133, 164724, 168877, 171436, 172954, 164198, 166938, 196697, 182826],
                    [40095, 29419, 31529, 29254, 31651, 30531, 28186, 29555, 40653, 29100],
                    [6272, 9147, 14278, 16617, 16677, 17307, 18146, 16962, 6043, 8439]
            ]}
    psnr = {
    'Default_test': [
    [40.029048516273406, 39.794388012160724, 39.71876129712766, 39.617107631522906, 39.626630928627634, 39.60317739478543, 39.62697553553475, 39.58197351509173, 40.00629262751075, 39.72768732723155],
    [35.953918715179356, 35.895205308252855, 35.788945295322506, 35.68296973974548, 35.61980697832916, 35.51358818526114, 35.4691410333327, 35.39012256941601, 35.967486513739495, 35.882453316615894],
    [31.170277680691093, 31.388582864193623, 31.38896655963339, 31.40497224112229, 31.43472797865666, 31.457163215333036, 31.5179097411208, 31.54275408363406, 31.017457099212216, 31.270864254956386],
    [28.414493328086785, 28.493058048028516, 28.560880618668854, 28.59983807999913, 28.624429050877588, 28.660341896195632, 28.661851607291364, 28.698031145391674, 28.072232417082393, 28.130451906764968]
    ], 'MFR_test': [[40.029048516273406, 39.794388012160724, 39.71876129712766, 39.617107631522906, 39.626630928627634, 39.60317739478543, 39.62697553553475, 39.58197351509173, 40.00629262751075, 39.72768732723155],
    [35.953918715179356, 35.895205308252855, 35.788945295322506, 35.68296973974548, 35.61980697832916, 35.51358818526114, 35.4691410333327, 35.39012256941601, 35.967486513739495, 35.882453316615894], [31.170277680691093, 31.388582864193623, 31.38896655963339, 31.40497224112229, 31.43472797865666, 31.457163215333036, 31.5179097411208, 31.54275408363406, 31.017457099212216, 31.270864254956386], [28.414493328086785, 28.493058048028516, 28.560880618668854, 28.59983807999913, 28.624429050877588, 28.660341896195632, 28.661851607291364, 28.698031145391674, 28.072232417082393, 28.130451906764968]], 'VBSEnable_only_test': [[40.66457739624987, 40.54104466986701, 40.572094134208115, 40.552634162126154, 40.59402807432741, 40.56985498767932, 40.60150532097871, 40.6019971988463, 40.619947178757855, 40.52296387183401], [37.94138416945912, 37.33445961633318, 37.22385970160536, 37.17716707404341, 37.154724460427474, 37.13438229763538, 37.1490276552048, 37.060055589708355, 37.9914101143863, 37.32286687920941], [32.716244593834006, 32.76094525985998, 32.738495952299274, 32.779468642088865, 32.79011191503131, 32.85766879135898, 32.88055759421365, 32.93108805738376, 32.61708420484347, 32.736735050057206], [28.602367325681577, 28.696969015339192, 28.788668390592544, 28.873930068722487, 28.880258027384112, 28.88217670242593, 28.923200617046234, 28.952671652502296, 28.57390703397128, 28.654050230129986]], 'FMEEnable_only_test': [[40.029048516273406, 40.58256882175242, 40.633761535950754, 40.646602950221215, 40.71675186116152, 40.77693696872502, 40.743197218629916, 40.91301872756779, 40.00629262751075, 40.51682994627191], [35.953918715179356, 36.3408627792472, 36.398778193221744, 36.45547189626494, 36.42395025897947, 36.41401971416585, 36.45798640126601, 36.57416646383706, 35.967486513739495, 36.25099326565476], [31.170277680691093, 31.56059743900248, 31.74107429408618, 31.860224145463594, 31.937691365625863, 32.13136671237853, 32.21495614726996, 32.2584024862717, 31.017457099212216, 31.517379001424292], [28.414493328086785, 28.548647756849522, 28.722741248435504, 28.858035671620517, 29.010042154596118, 29.147812023230276, 29.27672499092266, 29.454193050633265, 28.072232417082393, 28.19583723689686]], 'FastMEEnable_only_test': [[40.029048516273406, 39.829326677746984, 39.76313308482883, 39.65779211867287, 39.620336086669944, 39.591563919360965, 39.612103745183305, 39.59974536511184, 40.00629262751075, 39.72861559913102], [35.953918715179356, 35.92440866302633, 35.857589031657284, 35.78449541311129, 35.70648859923593, 35.640396349002174, 35.583455921616775, 35.54184943683835, 35.967486513739495, 35.89156098333651], [31.170277680691093, 31.381739189979413, 31.438227631245304, 31.44763085485675, 31.483775790656175, 31.479115693317652, 31.534133227811587, 31.497677335674553, 31.017457099212216, 31.22987196389467], [28.414493328086785, 28.53837337961562, 28.607873932683145, 28.63542942357506, 28.627331903462387, 28.65723844823171, 28.64277273147911, 28.656993266366726, 28.072232417082393, 28.15280875038166]], 'AllEnable_test': [[40.66457739624987, 40.98175933464215, 41.09305542002449, 41.1027092402005, 41.146727809620494, 41.156510410666115, 41.166254772320706, 41.233403725013375, 40.619947178757855, 40.96599614057001], [37.94138416945912, 38.07719602309707, 38.10227612426202, 38.138332830259046, 38.141024391056234, 38.1280027779712, 38.14885528057076, 38.176981255677084, 37.9914101143863, 37.953223951653655], [32.716244593834006, 33.06966349102265, 33.266773340071786, 33.39496345714247, 33.416014968379876, 33.465355199768, 33.56052251106194, 33.59975881122101, 32.61708420484347, 32.92944778926981], [28.602367325681577, 28.790175016486902, 28.981341374034542, 29.168738646111606, 29.31136307673703, 29.45599864268371, 29.644854564320692, 29.88681978149456, 28.57390703397128, 28.744105637922512]]}
    mappers = {key:{"x":[],"y":[]} for key in psnr}

    plt.figure()
    plt.xlabel('Bit rate')
    plt.ylabel('PSNR (db)')
    colors = iter(cm.jet(np.linspace(0, 1, len(psnr))))
    for section in psnr:
        color = next(colors)
        print(color)
        print(section)
        # 1,4,7,10
        psnr_avg_1 = np.average(bits[section][0])
        bits_sum_1 = np.sum(psnr[section][0])
        psnr_avg_4 = np.average(bits[section][1])
        bits_sum_4 = np.sum(psnr[section][1])
        psnr_avg_7 = np.average(bits[section][2])
        bits_sum_7 = np.sum(psnr[section][2])
        psnr_avg_10 = np.average(bits[section][3])
        bits_sum_10 = np.sum(psnr[section][3])
        arr1_x, arr2_x, arr3_x, arr4_x = psnr_avg_1, psnr_avg_4, psnr_avg_7, psnr_avg_10
        arr1, arr2, arr3, arr4 = bits_sum_1, bits_sum_4, bits_sum_7, bits_sum_10
        x = [arr1_x, arr2_x, arr3_x, arr4_x]
        y = [arr1, arr2, arr3, arr4]

        popt, _ = curve_fit(objective, x, y)
        a, b, c= popt
        x_line = np.arange(min(x), max(x), 1)
        y_line = objective(x_line, a, b, c)

        plt.scatter(x, y, label="{}".format(section), marker='o', color=color)
        plt.plot(x_line, y_line, '--', c=color)
        
    plt.title("RD Plots")    
    plt.legend()
    plt.savefig("RD Plots of different features.png")
    plt.close()

def Execution_time_plot():
    default_1 = 10.273208141326904
    default_4 = 9.413216352462769
    default_7 = 9.062466144561768
    default_10 = 9.092720031738281

    defaults = [round(default_1, 2), round(default_4, 2), round(default_7, 2), round(default_10, 2)]

    MFR_test_1 = 10.648228406906128
    MFR_test_4 = 9.351354360580444
    MFR_test_7 = 9.034790277481079
    MFR_test_10 = 9.102600336074829

    MFRs = [round(MFR_test_1, 2), round(MFR_test_4, 2), round(MFR_test_7, 2), round(MFR_test_10, 2)]

    VBSEnable_only_test_1 = 34.630600929260254
    VBSEnable_only_test_4 = 32.19062924385071
    VBSEnable_only_test_7 = 31.12554693222046
    VBSEnable_only_test_10=  31.351897478103638

    VBSEnables = [round(VBSEnable_only_test_1, 2), round(VBSEnable_only_test_4, 2), round(VBSEnable_only_test_7, 2), round(VBSEnable_only_test_10, 2)]

    FMEEnable_only_test_1 = 37.78927445411682
    FMEEnable_only_test_4 = 36.77782988548279
    FMEEnable_only_test_7 = 36.32427358627319
    FMEEnable_only_test_10=  36.50808906555176

    FMEEnables = [round(FMEEnable_only_test_1, 2), round(FMEEnable_only_test_4, 2), round(FMEEnable_only_test_7, 2), round(FMEEnable_only_test_10, 2)]

    FastMEEnable_only_test_1 = 7.119495153427124
    FastMEEnable_only_test_4 = 5.924187183380127
    FastMEEnable_only_test_7 = 5.466054677963257
    FastMEEnable_only_test_10 = 5.292719841003418

    FastMEEnables = [round(FastMEEnable_only_test_1, 2), round(FastMEEnable_only_test_4, 2), round(FastMEEnable_only_test_7, 2), round(FastMEEnable_only_test_10, 2)]

    AllEnable_test_1 = 25.120534420013428
    AllEnable_test_4 = 22.944582223892212
    AllEnable_test_7 = 23.011136054992676
    AllEnable_test_10= 18.19708824157715

    AllEnables = [round(AllEnable_test_1, 2), round(AllEnable_test_4, 2), round(AllEnable_test_7, 2), round(AllEnable_test_10, 2)]

    width = 0.15  # the width of the bars
    multiplier = 0
    fig, ax = plt.subplots()
    items = [defaults, MFRs, VBSEnables, FMEEnables, FastMEEnables, AllEnables]
    labels = ["qp=1", "qp=4", "qp=7", "qp=10"]
    species = ["Default", "Multiple Reference Frames", "Variable Block Size", "Fractional Motion Estimation", "Fast Motion Estimation", "All Features"]
    x = np.arange(len(labels))
    labels_loc = np.arange(6)
    for name, measurements in zip(species, items):
        offset = width * multiplier
        rects = ax.bar(x + offset, measurements, width, label=name)
        ax.bar_label(rects, padding=6)
        multiplier += 1
    # Add some text for labels, title and custom x-axis tick labels, etc.
    ax.set_ylabel('Execution time (s)')
    ax.set_title('Execution time of different settings')
    ax.set_xticks(x + width, labels)
    ax.legend(loc='upper left', ncols=6)
    ax.set_ylim(0, 45)
    ax.set_title('Total execution time of 10 frames in different settings')
    plt.show()
    # plt.savefig("time_plot.png")
    plt.close()

def Split_rate(): 
    split_rate = [[0.6388888888888888, 0.8459595959595959,
        0.8737373737373737, 0.8888888888888888, 0.9040404040404041, 0.9090909090909091,
        0.9040404040404041, 0.9217171717171717, 0.7070707070707071,
        0.8459595959595959], [0.9292929292929293, 0.8636363636363636,
        0.8207070707070707, 0.8787878787878788, 0.8611111111111112, 0.8434343434343434,
        0.8156565656565656, 0.8409090909090909, 0.9318181818181818,
        0.8358585858585859], [0.8888888888888888, 0.5631313131313131,
        0.6035353535353535, 0.547979797979798, 0.5833333333333334, 0.5959595959595959,
        0.5404040404040404, 0.49747474747474746, 0.8939393939393939,
        0.43434343434343436], [0.4823232323232323, 0.255050505050505,
        0.2777777777777778, 0.29292929292929293, 0.3055555555555556,
        0.29292929292929293, 0.26262626262626265, 0.28535353535353536,
        0.44696969696969696, 0.24242424242424243]]

    bits = [[495834, 541823, 540990, 542802, 542215, 542940, 535439,
        543001, 506994, 544331], [194239, 183852, 177689, 188865, 183272, 184878,
        175786, 179683, 196697, 183373], [40095, 28178, 31500, 29352, 31001, 32019,
        31128, 29367, 40653, 25701], [6272, 9124, 11354, 12397, 13180, 12963, 12785,
        13264, 6043, 8876]]
    # labels = ["qp=1", "qp=4", "qp=7", "qp=10"]
    # width = 0.8  # the width of the bars
    # multiplier = 0
    # fig, ax = plt.subplots()
    # # species = ["Default", "Multiple Reference Frames", "Variable Block Size", "Fractional Motion Estimation", "Fast Motion Estimation", "All Features"]
    # x = np.arange(4)
    # labels_loc = np.arange(6)
    # for xs, name, sr in zip(x, labels, split_rate):
    #     # print(np.average(np.array(sr)*100))
    #     offset = width
    #     rects = ax.bar(xs+offset, np.average(np.array(sr)*100), width, label=name)
    #     ax.bar_label(rects)
    #     multiplier += 1
    # # Add some text for labels, title and custom x-axis tick labels, etc.
    # ax.set_ylabel('Split Rate (%)')
    # ax.set_xticks(x + width, labels)
    # ax.legend(loc='upper left', ncols=1)
    # ax.set_ylim(0, 100)
    # ax.set_title('Split Rate with various QP values')
    # plt.show()
    # # plt.savefig("time_plot.png")
    # plt.close()

    plt.figure()
    # plt.xlabel('QP values')
    plt.xlabel('Bit Stream Size')
    plt.ylabel('Split Rate (%)')
    #　labels = ["qp=1", "qp=4", "qp=7", "qp=10"]
    bit_labels = ["Size={}".format(np.average(bss)) for bss in bits]
    # xs = [1,4,7,10]
    xs = [np.average(bss) for bss in bits]
    # for x, sr, label in zip(xs, split_rate, labels):
    # print(xs, [np.average(np.array(sr)*100) for sr in split_rate])
    plt.plot(xs, [np.average(np.array(sr)*100) for sr in split_rate])
    for x, sr, label in zip(bits, split_rate, bit_labels):
        plt.scatter(np.average(x), np.average(np.array(sr)*100), label=label)
    plt.title("Split Rate with various Bit Stream Size")
    plt.legend()
    plt.show()
    plt.close()

if __name__ == '__main__':
    # RD_plot()
    # Execution_time_plot()
    Split_rate()